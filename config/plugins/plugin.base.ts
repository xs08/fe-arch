import { IConfig } from '@umijs/preset-umi';
import { WatchIgnorePlugin } from 'webpack';
type IChainWebpack = NonNullable<IConfig['chainWebpack']>;

export const baseWebpackPlugin: IChainWebpack = (memo, {}) => {
  // file resolve
  memo.merge({
    resolve: {
      extensions: ['*', '.ts', '.tsx', '.js', '.scss', '...'],
    },
  });

  // Style *.d.ts config
  const rulesConfig = [
    { name: 'css', test: /\.css(\?.*)?$/ },
    { name: 'less', test: /\.less(\?.*)?$/ },
    { name: 'sass', test: /\.(sass|scss)(\?.*)?$/ },
  ];
  for (const { name, test } of rulesConfig) {
    const rule = memo.module.rule(name);
    rule
      .test(test)
      .oneOf('css-modules')
      .resourceQuery(/modules/)
      .use('typings-for-css-modules-loader')
      .loader(require.resolve('@teamsupercell/typings-for-css-modules-loader'))
      .options({
        banner: '// autogenerated by typings-for-css-modules-loader. \n// Please do not change this file!',
        formatter: 'prettier',
      })
      .before('css-loader');
  }
  memo.plugin('IgnorePlugin').use(
    new WatchIgnorePlugin({
      paths: [/css\.d\.ts$/, /less\.d\.ts$/, /scss\.d\.ts$/],
    }),
  );
};
